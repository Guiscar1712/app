# Azure Pipeline
#   vmImageName: Versão da VM (padrão: ubuntu-latest)
#   *webAppName: Nome do respectivo web app na Azure
#   *environment: Respectivo ambiente do pipe 
#   *azureSubscription: Nome da service connection com a Azure
#    ------------------------------------------------------------
#   *Variáveis que devem ser configuradas diretamente no pipeline

trigger: none # Política de gatilho deve ser sobrescrita no pipeline

variables:
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: build stage
  jobs:
  - job: Build
    displayName: build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '16.x'
      displayName: 'install node'

    - script: |
        npm install --production
      displayName: "npm install"

    - task: DeleteFiles@1
      displayName: 'delete dot files'
      inputs:
        SourceFolder: '.'
        Contents: '.git'
        RemoveDotFiles: true

    - task: ArchiveFiles@2
      displayName: 'archive'
      inputs:
        rootFolderOrFile: '.'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: 'deploy to azure webapp' 
    environment: $(environment)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'webapp deploy: $(webAppName)'
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webAppLinux
              appName: $(webAppName)
              runtimeStack: 'NODE|16-lts'
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
              StartupCommand: | 
                bash -c 'if [ "${worker}" == "true" ]; then npm run worker; else npm install; fi'
